const portfolioModel = require("../models/portfolioModel");
const accountModel = require("../models/accountModel");
const { registrerHandel } = require("../models/portfolioModel");


// Viser alle portef√∏ljer i en liste
async function visPortefoljeOversigt(req, res) {
    try {
      const portefoljer = await portfolioModel.hentAllePortefoljer();
  
      for (const p of portefoljer) {
        const papirer = await portfolioModel.hentV√¶rdipapirerTilPortef√∏lje(p.portef√∏ljeID);
        const totalValue = papirer.reduce((sum, papir) => sum + (papir.pris * papir.antal), 0);
        p.totalValue = totalValue; // üîÅ l√¶g v√¶rdien direkte ind i objektet
      }
  
      // Du kan stadig regne samlet v√¶rdi hvis n√∏dvendigt
      const totalV√¶rdi = portefoljer.reduce((sum, p) => sum + (p.totalValue || 0), 0);
  
      res.render("portefoljeOversigt", { portefoljer, totalV√¶rdi });
    } catch (err) {
      console.error("Fejl ved hentning af portef√∏ljer:", err);
      res.status(500).send("Noget gik galt ved visning af portef√∏ljeoversigten.");
    }
  }
  
  
// Viser √©n bestemt portef√∏lje og dens aktier
async function visEnPortefolje(req, res) {
  const portefoljeID = parseInt(req.params.id, 10);
  if (isNaN(portefoljeID)) {
    return res.status(400).send("Ugyldigt portef√∏lje-ID");
  }
  try {
    const portefolje = await portfolioModel.hentPortefoljeMedID(portefoljeID);
    if (!portefolje) {
      return res.status(404).send("Portef√∏lje ikke fundet.");
    }
    const v√¶rdipapirer = await portfolioModel.hentV√¶rdipapirerTilPortef√∏lje(portefoljeID);
    const historik = await portfolioModel.hentV√¶rdiHistorik(portefoljeID);
    let samletV√¶rdi = 0;
    for (let i = 0; i < v√¶rdipapirer.length; i++) {
      samletV√¶rdi += v√¶rdipapirer[i].antal * v√¶rdipapirer[i].pris;
    }
    res.render("portefolje", { portefolje, v√¶rdipapirer, samletV√¶rdi,historik });
  } catch (err) {
    console.error("Fejl ved visning af portef√∏lje:", err);
    res.status(500).send("Noget gik galt ved visning af portef√∏lje.");
  }
}

// Viser formularen til at oprette ny portef√∏lje
function visOpretPortefoljeFormular(req, res) {
  res.render("opretPortefolje");
}

// N√•r brugeren sender formularen og vil oprette ny portef√∏lje
// N√•r brugeren sender formularen og vil oprette ny portef√∏lje
async function opretPortefolje(req, res) {
    const { navn, kontotilknytning, forventetV√¶rdi } = req.body;
    const brugerID = req.cookies.brugerID; // eller hvor du gemmer det
  
    if (!brugerID) {
      return res.status(401).send("Bruger ikke logget ind.");
    }
  
    try {
      await portfolioModel.opretNyPortefolje({
        navn,
        kontotilknytning,
        forventetV√¶rdi,
        brugerID
      });
  
      res.redirect("/portefolje/oversigt");
    } catch (err) {
      console.error("Fejl ved oprettelse af portef√∏lje:", err);
      res.status(500).send("Kunne ikke oprette portef√∏lje.");
    }
  }
  

// Viser k√∏b/salg transaktioner for en portef√∏lje

async function hentTransaktionerForPortef√∏lje(req, res) {
    const portef√∏ljeID = parseInt(req.params.id, 10);
    if (isNaN(portef√∏ljeID)) {
      return res.status(400).send("Ugyldigt portef√∏lje-ID");
    }
  
    try {
      const transaktioner = await portfolioModel.hentTransaktionerForPortef√∏lje(portef√∏ljeID);
      const portef√∏lje = await portfolioModel.hentPortefoljeMedID(portef√∏ljeID); // <- her bruger du din eksisterende funktion
  
      res.render("handelshistorik", { transaktioner, portef√∏lje });
    } catch (err) {
      console.error("Fejl ved hentning af handelshistorik:", err);
      res.status(500).send("Kunne ikke hente handelshistorik.");
    }
  }

// S√∏ger efter v√¶rdipapir med API og viser s√∏geresultat
async function s√∏gEfterPapir(req, res) {
  const s√∏gning = req.query.query;
  const portef√∏ljeID = req.params.id;
  if (!s√∏gning) {
      
      return res.status(400).send("Skriv venligst noget du vil s√∏ge efter.");
    }
    try {
        const s√∏geLink = `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${s√∏gning}&apikey=${process.env.API_KEY}`;
        const svar = await fetch(s√∏geLink);
        const data = await svar.json();
        //console.log("Alpha Vantage response:", data);
    const fundet = data.bestMatches?.[0];
    if (!fundet) {
      return res.send("Ingen v√¶rdipapir fundet.");
    }
    const symbol = fundet["1. symbol"];
    const navn = fundet["2. name"];

    const prisLink = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${process.env.API_KEY}`;
    const prisSvar = await fetch(prisLink);
    const prisData = await prisSvar.json();
    const pris = prisData["Global Quote"]?.["05. price"] || "Ukendt";

    const brugerID = req.cookies.brugerID;
    const konti = await portfolioModel.hentKontiForBruger(brugerID);
    const kontoID = konti?.[0]?.kontoID || null;

    res.render("searchPapir", {
      result: { symbol, navn, pris },
      portef√∏ljeID,
      kontoID
    });
  } catch (fejl) {
    console.error(fejl);
    res.status(500).send("Noget gik galt under s√∏gningen.");
  }
}

// Viser formular til at k√∏be v√¶rdipapir
async function visBuyPapirForm(req, res) {
    const portefoljeID = parseInt(req.params.id);
    const symbol = req.query.symbol;
    const navn = req.query.navn;
    const pris = req.query.pris;

    if (!symbol || !navn || !pris) {
      return res.status(400).send("Mangler n√∏dvendige oplysninger i URL.");
    }

    const konti = await portfolioModel.hentKontiForBruger(req.cookies.brugerID);

    res.render("buyPapir", {
      tickerSymbol: symbol,
      navn,
      pris,
      portefoljeID,
      konti,
      transaktionstype: "k√∏b",
      v√¶rditype: "Aktie",
      gebyr: 0,
      tidspunkt: new Date().toISOString()
    });
}

  

async function k√∏bEllerS√¶lg(req, res) {
    try {
      const data = {
        portef√∏ljeID: parseInt(req.body.portef√∏ljeID),
        kontoID: parseInt(req.body.kontoID),
        type: req.body.transaktionstype, // "k√∏b" eller "s√¶lg"
        pris: parseFloat(req.body.pris),
        gebyr: parseFloat(req.body.gebyr) || 0,
        antal: parseInt(req.body.antal),
        tickerSymbol: req.body.tickerSymbol,
        v√¶rditype: req.body.v√¶rditype,
        navn: req.body.navn
      };

      const konto = await accountModel.hentKontoMedID(data.kontoID);
        if (!konto || konto.aktiv===false) {
        return res.status(403).send("Handel er ikke mulig. Kontoen er lukket.");
        }
  
      await portfolioModel.registrerHandel(data);
  
      // Opdater sidste handelsdato
      await portfolioModel.opdaterSidsteHandelsDato(data.portef√∏ljeID);
  
      // Redirect brugeren tilbage til portef√∏ljen
      res.redirect(`/portefolje/${data.portef√∏ljeID}`);
    } catch (err) {
      console.error("Fejl under k√∏b/salg:", err.message);
      res.status(400).send("Fejl under handel: " + err.message);
    }
  }
  

// Viser detaljer for et v√¶rdipapir
async function visV√¶rdipapirDetaljer(req, res) {
    const v√¶rdipapirID = parseInt(req.params.id, 10);
    if (isNaN(v√¶rdipapirID)) {
      return res.status(400).send("Ugyldigt v√¶rdipapir-ID");
    }
  
    try {
      // Henter og opdaterer urealiseret gevinst/tab via model
      const v√¶rdipapir = await portfolioModel.hentOgOpdaterV√¶rdipapirMedAktuelV√¶rdi(v√¶rdipapirID);
  
      if (!v√¶rdipapir) {
        return res.status(404).send("V√¶rdipapir ikke fundet.");
      }
  // henter histroik for v√¶rdipapir
  const historik = await portfolioModel.hentHistorikForV√¶rdipapir(v√¶rdipapirID);
      res.render("valueInfo", { v√¶rdipapir, historik });
    } catch (err) {
      console.error(err);
      res.status(500).send("Fejl ved visning af v√¶rdipapir.");
    }
  }
  

async function s√¶lgPapirForm(req, res) {
    const v√¶rdipapirID = parseInt(req.params.id);

  //console.log(v√¶rdipapirID)test

    const v√¶rdipapir = await portfolioModel.hentV√¶rdipapirMedID(v√¶rdipapirID);   
      
    if (!v√¶rdipapir) {
      return res.status(404).send("V√¶rdipapir ikke fundet.");
    }
  
    const portef√∏ljeID = v√¶rdipapir.portef√∏ljeID; // Hvis det er inkluderet
    const konti = await portfolioModel.hentKontiForBruger(req.cookies.brugerID);
  
    res.render("sellPapirForm", {
        v√¶rdipapir,
        tickerSymbol: v√¶rdipapir.tickerSymbol,
        navn: v√¶rdipapir.navn, 
        pris: v√¶rdipapir.pris,
        portef√∏ljeID,
        v√¶rdipapirID,
        konti,
        transaktionstype: "s√¶lg",
        v√¶rditype: "Aktie",
        gebyr: 0,
        tidspunkt: new Date().toISOString()
      });
      
  }
  

module.exports = {
  visPortefoljeOversigt,
  visEnPortefolje,
  visOpretPortefoljeFormular,
  opretPortefolje,
  hentTransaktionerForPortef√∏lje,
  s√∏gEfterPapir,
  visBuyPapirForm,
  k√∏bEllerS√¶lg,
  visV√¶rdipapirDetaljer,
  s√¶lgPapirForm
};

