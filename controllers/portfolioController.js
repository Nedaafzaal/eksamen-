//importerer modeller
const portfolioModel = require("../models/portfolioModel");
const accountModel = require("../models/accountModel");


//funktion til at vise alle portef칮ljer for brugeren
async function visPortef칮ljeOversigt(req, res) {
    try {
      const brugerID = parseInt(req.cookies.brugerID); 

      if (!brugerID) {
        return res.status(401).send("Bruger ikke logget ind.");
      }
  
      const portef칮ljer = await portfolioModel.hentAllePortef칮ljerForBruger(brugerID);
      
    
    //g친r igennem hvert portef칮lje (p) for brugeren hvor den f칮rst henter alle v칝rdipapirer og dern칝st beregner den samlede v칝rdi (total value) for alle v칝rdipapirer i den p den er p친. 
    for (const portef칮lje of portef칮ljer) {
        const aktier = await portfolioModel.hentV칝rdipapirTilPortef칮lje(portef칮lje.portef칮ljeID);
        let samletV칝rdi = 0;
    
        for (const aktie of aktier) {
            samletV칝rdi += aktie.pris * aktie.antal;
        }
        portef칮lje.totalValue = samletV칝rdi; //gemmer totalvalue som en egenskab af objektet portef칮ljer. 
    }
  
    let totalV칝rdi = 0;

        //gennemg친r hvert portef칮lje ejet af brugeren og bestemmer totalv칝rdien for alle portef칮ljer. Hvis ikke portef칮lje har en totalValue, l칝gges 0 til for at undg친 programmet fejler. 
        for (const portef칮lje of portef칮ljer) {
        if (portef칮lje.totalValue) {
            totalV칝rdi += portef칮lje.totalValue;
        } else {
            totalV칝rdi += 0; 
        }
    }

      res.render("portefoljeOversigt", { portef칮ljer, totalV칝rdi });

    } catch (err) {
      console.error("Fejl ved hentning af portef칮ljer:", err);
      res.status(500).send("Noget gik galt ved visning af portef칮ljeoversigten.");
    }
  }
  
  
//funktion som henter portef칮lje og dens tih칮rende aktier
async function visEtPortef칮lje(req, res) {
  const portef칮ljeID = parseInt(req.params.id, 10);
  if (isNaN(portef칮ljeID)) {
    return res.status(400).send("Ugyldigt portef칮lje-ID");
  }
  try {
    const portef칮lje = await portfolioModel.hentPortef칮ljeMedID(portef칮ljeID);
    if (!portef칮lje) {
      return res.status(404).send("Portef칮lje ikke fundet.");
    }
    const v칝rdipapirer = await portfolioModel.hentV칝rdipapirTilPortef칮lje(portef칮ljeID);
    const historik = await portfolioModel.hentV칝rdiHistorik(portef칮ljeID);

    //bestemmer samletv칝rdi for v칝rdipapirer i portef칮lje. Gennemg친r en forloop gennem alle v칝rdipapirer og ganger antallet af v칝rdipapir med erhvevelsesprisen = samlet v칝rdi. 
    let samletV칝rdi = 0;
    for (let i = 0; i < v칝rdipapirer.length; i++) {
      samletV칝rdi += v칝rdipapirer[i].antal * v칝rdipapirer[i].pris;
    }

    res.render("portefolje", { portef칮lje, v칝rdipapirer, samletV칝rdi, historik });
  } catch (err) {
    console.error("Fejl ved visning af portef칮lje:", err);
    res.status(500).send("Noget gik galt ved visning af portef칮lje.");
  }
}

//funktion som viser formular for oprettelse af portef칮lje
async function visOpretPortef칮ljeFormular(req, res) {
    const brugerID = parseInt(req.cookies.brugerID);
  
    try {
      const konti = await portfolioModel.hentKontiForBruger(brugerID);
      res.render("opretportefolje", { konti });
    } catch (err) {
      console.error("Fejl ved hentning af konti:", err);
      res.status(500).send("Kunne ikke hente konti");
    }
  }

//funktion hvor oprettelsen foreg친r
async function opretPortef칮lje(req, res) {
    const navn = req.body.navn;
    const kontoID = req.body.kontoID;
    const forventetV칝rdi = req.body.forventetV칝rdi;
    const brugerID = req.cookies.brugerID;
  
    if (!brugerID) {
      return res.status(401).send("Bruger ikke logget ind.");
    }
  
    try {
      await portfolioModel.opretNyPortef칮lje({
        navn,
        kontoID: parseInt(kontoID),
        forventetV칝rdi: parseFloat(forventetV칝rdi),
        brugerID: parseInt(brugerID)
      });
  
      res.redirect("/portefolje/oversigt");
    } catch (err) {
      console.error("Fejl ved oprettelse af portef칮lje:", err);
      res.status(500).send("Kunne ikke oprette portef칮lje.");
    }
  }
  
  

//viser k칮b/salg transaktioner for et portef칮lje
async function hentTransaktionerForPortef칮lje(req, res) {
    const portef칮ljeID = parseInt(req.params.id, 10);
    if (isNaN(portef칮ljeID)) {
      return res.status(400).send("Ugyldigt portef칮lje-ID");
    }
  
    try {
      const transaktioner = await portfolioModel.hentTransaktionerForPortef칮lje(portef칮ljeID);
      const portef칮lje = await portfolioModel.hentPortef칮ljeMedID(portef칮ljeID);
  
      res.render("handelshistorik", { transaktioner, portef칮lje });
    } catch (err) {
      console.error("Fejl ved hentning af handelshistorik:", err);
      res.status(500).send("Kunne ikke hente handelshistorik.");
    }
  }

// //s칮ger efter v칝rdipapirer med API og viser resultat
async function s칮gEfterPapir(req, res) {
  const s칮gning = req.query.query;
  const portef칮ljeID = req.params.id;

  if (!s칮gning) {
      return res.status(400).send("Skriv venligst noget.");
    }
    try {
        //bygger et link til alpha vantage API til at s칮ge efter aktier
        const s칮geLink = `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${s칮gning}&apikey=${process.env.API_KEY}`;
        const svar = await fetch(s칮geLink);
        const data = await svar.json();
        //console.log("Alpha Vantage response:", data);
    
    //bestMaches er en liste array, og vi beder den om at gennem fundet som det f칮rste match 
    const fundet = data.bestMatches[0];
    if (!fundet) {
      return res.send("Ingen v칝rdipapir fundet.");
    }
    const symbol = fundet["1. symbol"];
    const navn = fundet["2. name"];

    const prisLink = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${process.env.API_KEY}`;
    const prisSvar = await fetch(prisLink);
    const prisData = await prisSvar.json();
    const pris = prisData["Global Quote"]?.["05. price"] || "Ukendt";

    const brugerID = req.cookies.brugerID;
    const konti = await portfolioModel.hentKontiForBruger(brugerID);
    const kontoID = konti?.[0]?.kontoID || null;

    res.render("searchPapir", {
      result: { symbol, navn, pris },
      portef칮ljeID,
      kontoID
    });
  } catch (fejl) {
    console.error(fejl);
    res.status(500).send("Noget gik galt under s칮gningen.");
  }
}

// Viser formular til at k칮be v칝rdipapir
async function visBuyPapirForm(req, res) {
    const portef칮ljeID = parseInt(req.params.id, 10);
    const symbol = req.query.symbol;
    const navn = req.query.navn;
    const pris = req.query.pris;
  
    if (!symbol || !navn || !pris) {
      return res.status(400).send("Mangler n칮dvendige oplysninger i URL.");
    }
  
    try {
      const portef칮lje = await portfolioModel.hentPortef칮ljeMedID(portef칮ljeID);
      if (!portef칮lje) {
        return res.status(404).send("Portef칮lje ikke fundet.");
      }

      const konto = await accountModel.hentKontoMedID(portef칮lje.kontoID);
      if(!konto){
        return res.status(404).send("Tilknyttet konto findes ikke");
      }
  
      res.render("buyPapir", {
        tickerSymbol: symbol,
        navn,
        pris,
        portef칮ljeID,
        konto,
        transaktionstype: "k칮b",
        v칝rditype: "Aktie",
        gebyr: 0,
        tidspunkt: new Date().toISOString()
      });
  
    } catch (err) {
      console.error("Fejl i visBuyPapirForm:", err);
      res.status(500).send("Noget gik galt ved visning af k칮b-formular.");
    }
  }
  


async function k칮bEllerS칝lg(req, res) {
    try {
      const data = {
        portef칮ljeID: parseInt(req.body.portef칮ljeID),
        kontoID: parseInt(req.body.kontoID),
        type: req.body.transaktionstype, // "k칮b" eller "s칝lg"
        pris: parseFloat(req.body.pris),
        gebyr: parseFloat(req.body.gebyr) || 0,
        antal: parseInt(req.body.antal),
        tickerSymbol: req.body.tickerSymbol,
        v칝rditype: req.body.v칝rditype,
        navn: req.body.navn
      };

      const konto = await accountModel.hentKontoMedID(data.kontoID);
        if (!konto || konto.aktiv===false) {
        return res.status(403).send("Handel er ikke mulig. Kontoen er lukket.");
        }
  
      await portfolioModel.registrerHandel(data);
  
      // Opdater sidste handelsdato
      await portfolioModel.opdaterSidsteHandelsDato(data.portef칮ljeID);
  
      // Redirect brugeren tilbage til portef칮ljen
      res.redirect(`/portefolje/${data.portef칮ljeID}`);
    } catch (err) {
      console.error("Fejl under k칮b/salg:", err.message);
      res.status(400).send("Fejl under handel: " + err.message);
    }
  }
  

// Viser detaljer for et v칝rdipapir
async function visV칝rdipapirDetaljer(req, res) {
    const v칝rdipapirID = parseInt(req.params.id, 10);
    if (isNaN(v칝rdipapirID)) {
      return res.status(400).send("Ugyldigt v칝rdipapir-ID");
    }
  
    try {
      // Henter og opdaterer urealiseret gevinst/tab via model
      const v칝rdipapir = await portfolioModel.hentOgOpdaterV칝rdipapirMedAktuelV칝rdi(v칝rdipapirID);
      console.log("游닍 Forventet v칝rdi:", v칝rdipapir);

  
      if (!v칝rdipapir) {
        return res.status(404).send("V칝rdipapir ikke fundet.");
      }
  // henter histroik for v칝rdipapir
  const historik = await portfolioModel.hentHistorikForV칝rdipapir(v칝rdipapirID);
      res.render("valueInfo", { v칝rdipapir, historik });
    } catch (err) {
      console.error(err);
      res.status(500).send("Fejl ved visning af v칝rdipapir.");
    }
  }
  

  async function s칝lgPapirForm(req, res) {
    const v칝rdipapirID = parseInt(req.params.id, 10);
  
    const v칝rdipapir = await portfolioModel.hentV칝rdipapirMedID(v칝rdipapirID);   
  
    if (!v칝rdipapir) {
      return res.status(404).send("V칝rdipapir ikke fundet.");
    }
  
    const portef칮ljeID = v칝rdipapir.portef칮ljeID;
  
    // Hent den portef칮lje v칝rdipapiret tilh칮rer
    const portef칮lje = await portfolioModel.hentPortef칮ljeMedID(portef칮ljeID);
    if (!portef칮lje) {
      return res.status(404).send("Portef칮lje ikke fundet.");
    }
  
    // Hent kontoen knyttet til portef칮ljen
    const konto = await accountModel.hentKontoMedID(portef칮lje.kontoID);
    if (!konto) {
      return res.status(404).send("Konto ikke fundet.");
    }
  
    res.render("sellPapirForm", {
      v칝rdipapir,
      tickerSymbol: v칝rdipapir.tickerSymbol,
      navn: v칝rdipapir.navn, 
      pris: v칝rdipapir.pris,
      portef칮ljeID,
      konto, 
      transaktionstype: "s칝lg",
      v칝rditype: "Aktie",
      gebyr: 0,
      tidspunkt: new Date().toISOString()
    });
  }
  
  

module.exports = {
  visPortef칮ljeOversigt,
  visEtPortef칮lje,
  visOpretPortef칮ljeFormular,
  opretPortef칮lje,
  hentTransaktionerForPortef칮lje,
  s칮gEfterPapir,
  visBuyPapirForm,
  k칮bEllerS칝lg,
  visV칝rdipapirDetaljer,
  s칝lgPapirForm
};

